import logging
from aiogram import Bot, Router, types  # –î–æ–±–∞–≤–ª–µ–Ω Bot –≤ –∏–º–ø–æ—Ä—Ç
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from keyboards import get_main_keyboard  # –ò–º–ø–æ—Ä—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
from utils import get_time_greeting  # –ò–º–ø–æ—Ä—Ç —É—Ç–∏–ª–∏—Ç—ã
from constants import WELCOME_MESSAGE, HELP_MESSAGE, CONTACT_ADMIN_MESSAGE, ERROR_MESSAGE
from database import get_admin_ids, add_notification  # –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –ë–î

router = Router()
logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
class ContactAdmin(StatesGroup):
    contact_admin = State()

@router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start."""
    try:
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        greeting, sub_greeting = get_time_greeting()
        await message.answer(
            f"{greeting}, {message.from_user.first_name}! {sub_greeting}\n\n{WELCOME_MESSAGE}",
            reply_markup=get_main_keyboard(message.from_user.id)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_start –¥–ª—è user_id={message.from_user.id}: {e}")
        await message.answer(ERROR_MESSAGE)

@router.message(lambda message: message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def handle_back(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥'."""
    try:
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await message.answer(
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=get_main_keyboard(message.from_user.id)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_back –¥–ª—è user_id={message.from_user.id}: {e}")
        await message.answer(ERROR_MESSAGE)

@router.message(lambda message: message.text == "üìö –ü–æ–º–æ—â—å")
async def handle_help(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–ü–æ–º–æ—â—å'."""
    try:
        await message.answer(HELP_MESSAGE, reply_markup=get_main_keyboard(message.from_user.id))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_help –¥–ª—è user_id={message.from_user.id}: {e}")
        await message.answer(ERROR_MESSAGE)

@router.message(lambda message: message.text == "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
async def handle_contact_admin(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'."""
    try:
        await message.answer(CONTACT_ADMIN_MESSAGE)
        await state.set_state(ContactAdmin.contact_admin)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_contact_admin –¥–ª—è user_id={message.from_user.id}: {e}")
        await message.answer(ERROR_MESSAGE)

@router.message(ContactAdmin.contact_admin)
async def process_contact_admin(message: types.Message, state: FSMContext, bot: Bot):  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω —Ç–∏–ø bot
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    try:
        user_id = message.from_user.id
        username = message.from_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω"
        text = message.text
        admin_message = (
            f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
            f"ID: {user_id}\n"
            f"Username: @{username}\n"
            f"–¢–µ–∫—Å—Ç: {text}"
        )
        for admin_id in get_admin_ids():
            await add_notification(admin_id, admin_message)
        await message.answer(
            "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π —Å–∫–æ—Ä–æ!",
            reply_markup=get_main_keyboard(user_id)
        )
        await state.clear()
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –≤ process_contact_admin –¥–ª—è user_id={user_id}: {e}")
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_contact_admin –¥–ª—è user_id={user_id}: {e}")
        await message.answer(ERROR_MESSAGE)
