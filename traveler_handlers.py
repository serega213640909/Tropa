# handlers/traveler_handlers.py
import logging
from aiogram import Router, types, Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from keyboards import get_traveler_keyboard
from constants import (
    TRAVELER_WELCOME, ERROR_MESSAGE, NO_EXCURSIONS, BOOKING_SUCCESS,
    REVIEW_SUCCESS, REQUEST_SUCCESS, NO_BOOKINGS
)
from database import (
    get_excursions, book_excursion, add_review, get_bookings_by_user,
    add_request, get_guide
)
from utils import notify_new_booking, notify_new_request

router = Router()
logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
class RequestCreation(StatesGroup):
    city = State()
    keywords = State()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞
class ReviewCreation(StatesGroup):
    rating = State()
    comment = State()

@router.message(lambda message: message.text == "üåç –Ø –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫")
async def handle_traveler_menu(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥ –≤ –º–µ–Ω—é –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞."""
    try:
        await state.clear()
        await message.answer(TRAVELER_WELCOME, reply_markup=get_traveler_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_traveler_menu: {e}")
        await message.answer(ERROR_MESSAGE)

@router.message(lambda message: message.text == "üîç –ù–∞–π—Ç–∏ –º–∞—Ä—à—Ä—É—Ç")
async def handle_search_excursions(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã."""
    try:
        excursions = await get_excursions()
        if not excursions:
            await message.answer(NO_EXCURSIONS, reply_markup=get_traveler_keyboard())
            return
        for excursion in excursions:
            guide = await get_guide(excursion["guide_id"])
            book_button = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"book_{excursion['id']}")]
            ])
            message_text = (
                f"–ú–∞—Ä—à—Ä—É—Ç: {excursion['title']}\n"
                f"–ì–∏–¥: {guide['first_name']} {guide['last_name']}\n"
                f"–ì–æ—Ä–æ–¥: {excursion['city']}\n"
                f"–¢–µ–º–∞—Ç–∏–∫–∞: {excursion['theme']}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {excursion['description']}\n"
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {excursion['price']} —Ä—É–±./—á–µ–ª.\n"
                f"–î–∞—Ç—ã: {', '.join(excursion['dates'])}\n"
                f"–†–µ–π—Ç–∏–Ω–≥ –≥–∏–¥–∞: {guide['rating']:.1f} ({guide['review_count']} –æ—Ç–∑—ã–≤–æ–≤)"
            )
            await message.answer(message_text, reply_markup=book_button)
        await message.answer("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é:", reply_markup=get_traveler_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_search_excursions: {e}")
        await message.answer(ERROR_MESSAGE)

@router.callback_query(lambda c: c.data.startswith("book_"))
async def process_book_excursion(callback: types.CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞."""
    try:
        excursion_id = int(callback.data.split("_")[1])
        user_id = callback.from_user.id
        await book_excursion(user_id, excursion_id)  # –£–±–∏—Ä–∞–µ–º booking_id
        await callback.message.answer(BOOKING_SUCCESS, reply_markup=get_traveler_keyboard())
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≥–∏–¥–∞ –æ –Ω–æ–≤–æ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
        excursion = next((e for e in await get_excursions() if e["id"] == excursion_id), None)
        if excursion:
            await notify_new_booking(bot, excursion["guide_id"], excursion["title"], user_id)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_book_excursion: {e}")
        await callback.message.answer(ERROR_MESSAGE)
        await callback.answer()

@router.message(lambda message: message.text == "üìÖ –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
async def handle_my_bookings(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞."""
    try:
        bookings = await get_bookings_by_user(message.from_user.id)
        if not bookings:
            await message.answer(NO_BOOKINGS, reply_markup=get_traveler_keyboard())
            return
        for booking in bookings:
            excursion = next((e for e in await get_excursions() if e["id"] == booking["excursion_id"]), None)
            if excursion:
                guide = await get_guide(excursion["guide_id"])
                message_text = (
                    f"–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ #{booking['id']}\n"
                    f"–ú–∞—Ä—à—Ä—É—Ç: {excursion['title']}\n"
                    f"–ì–∏–¥: {guide['first_name']} {guide['last_name']}\n"
                    f"–ì–æ—Ä–æ–¥: {excursion['city']}\n"
                    f"–î–∞—Ç–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {booking['created_at']}\n"
                    f"–°—Ç–∞—Ç—É—Å: {booking['status']}"
                )
                await message.answer(message_text)
        await message.answer("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é:", reply_markup=get_traveler_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_my_bookings: {e}")
        await message.answer(ERROR_MESSAGE)

@router.message(lambda message: message.text == "‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
async def handle_leave_review(message: types.Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞."""
    try:
        bookings = await get_bookings_by_user(message.from_user.id)
        if not bookings:
            await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤.", reply_markup=get_traveler_keyboard())
            return
        await message.answer("–£–∫–∞–∂–∏ —Ä–µ–π—Ç–∏–Ω–≥ (–æ—Ç 1 –¥–æ 5):")
        await state.set_state(ReviewCreation.rating)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_leave_review: {e}")
        await message.answer(ERROR_MESSAGE)

@router.message(ReviewCreation.rating)
async def process_review_rating(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –æ—Ç–∑—ã–≤–∞."""
    try:
        rating = int(message.text)
        if rating < 1 or rating > 5:
            await message.answer("–†–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 5. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞:")
            return
        await state.update_data(rating=rating)
        await message.answer("–ù–∞–ø–∏—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ—Ç–∑—ã–≤—É:")
        await state.set_state(ReviewCreation.comment)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5:")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_review_rating: {e}")
        await message.answer(ERROR_MESSAGE)

@router.message(ReviewCreation.comment)
async def process_review_comment(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–∑—ã–≤–∞ –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å."""
    try:
        data = await state.get_data()
        rating = data["rating"]
        comment = message.text
        bookings = await get_bookings_by_user(message.from_user.id)
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–∏–¥–∞ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –≤—ã–±–æ—Ä)
        booking = bookings[0]
        excursion = next((e for e in await get_excursions() if e["id"] == booking["excursion_id"]), None)
        if excursion:
            guide_id = excursion["guide_id"]
            await add_review(message.from_user.id, guide_id, rating, comment)
            await message.answer(REVIEW_SUCCESS, reply_markup=get_traveler_keyboard())
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_review_comment: {e}")
        await message.answer(ERROR_MESSAGE)

@router.message(lambda message: message.text == "üì© –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
async def handle_create_request(message: types.Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏."""
    try:
        await message.answer("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏ –º–∞—Ä—à—Ä—É—Ç?")
        await state.set_state(RequestCreation.city)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_create_request: {e}")
        await message.answer(ERROR_MESSAGE)

@router.message(RequestCreation.city)
async def process_request_city(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ—Ä–æ–¥ –∑–∞—è–≤–∫–∏."""
    try:
        await state.update_data(city=message.text)
        await message.answer("–ö–∞–∫–∏–µ —É —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—ã? (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏—Å—Ç–æ—Ä–∏—è, –ø—Ä–∏—Ä–æ–¥–∞, –≥–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è):")
        await state.set_state(RequestCreation.keywords)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_request_city: {e}")
        await message.answer(ERROR_MESSAGE)

@router.message(RequestCreation.keywords)
async def process_request_keywords(message: types.Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∑–∞—è–≤–∫–∏ –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å."""
    try:
        data = await state.get_data()
        city = data["city"]
        keywords = message.text
        await add_request(message.from_user.id, city, keywords)
        await message.answer(REQUEST_SUCCESS, reply_markup=get_traveler_keyboard())
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
        request_text = (
            f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞:\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id}\n"
            f"–ì–æ—Ä–æ–¥: {city}\n"
            f"–ò–Ω—Ç–µ—Ä–µ—Å—ã: {keywords}"
        )
        await notify_new_request(bot, message.from_user.id, request_text)
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_request_keywords: {e}")
        await message.answer(ERROR_MESSAGE)

def register_traveler_handlers() -> Router:
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤."""
    return router
