# utils.py
import logging
from datetime import datetime, timedelta
from aiogram import Bot
from database import get_pending_notifications, mark_notification_as_sent, get_subscribers_for_excursion, add_notification, get_excursion, get_excursion_locations, get_booking
import aiohttp
import json
import os
from dotenv import load_dotenv
from typing import Dict
from constants import (
    NOTIFICATION_NEW_BOOKING, NOTIFICATION_REMINDER, NOTIFICATION_NEW_REQUEST, NOTIFICATION_NEW_COMPLAINT,
    WEATHER_RECOMMENDATION_RAIN, WEATHER_RECOMMENDATION_SUN, WEATHER_RECOMMENDATION_COLD
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –Ø–Ω–¥–µ–∫—Å API
YANDEX_WEATHER_API_KEY = os.getenv("YANDEX_WEATHER_API_KEY", "your_yandex_weather_api_key")
YANDEX_MAPS_API_KEY = os.getenv("YANDEX_MAPS_API_KEY", "your_yandex_maps_api_key")
YANDEX_TAXI_API_KEY = os.getenv("YANDEX_TAXI_API_KEY", "your_yandex_taxi_api_key")

def get_time_greeting() -> tuple[str, str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫."""
    hour = datetime.now().hour
    if 5 <= hour < 12:
        return "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ", "–ù–∞–¥–µ—é—Å—å, —Ç—ã –≥–æ—Ç–æ–≤ –∫ –Ω–æ–≤—ã–º –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º! üåû"
    elif 12 <= hour < 17:
        return "–î–æ–±—Ä—ã–π –¥–µ–Ω—å", "–°–∞–º–æ–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –Ω–∞ —ç–∫—Å–∫—É—Ä—Å–∏—é! ‚òÄÔ∏è"
    elif 17 <= hour < 23:
        return "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä", "–ö–∞–∫ –Ω–∞—Å—á—ë—Ç –≤–µ—á–µ—Ä–Ω–µ–π –ø—Ä–æ–≥—É–ª–∫–∏? üåÜ"
    else:
        return "–î–æ–±—Ä–æ–π –Ω–æ—á–∏", "–ú–æ–∂–µ—Ç, –≤—ã–±–µ—Ä–µ—à—å —ç–∫—Å–∫—É—Ä—Å–∏—é –Ω–∞ –∑–∞–≤—Ç—Ä–∞? üåô"

async def notify_users(bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    try:
        notifications = await get_pending_notifications()
        for notification in notifications:
            try:
                await bot.send_message(
                    chat_id=notification["user_id"],
                    text=notification["message"]
                )
                await mark_notification_as_sent(notification["id"])
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {notification['user_id']}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {notification['user_id']}: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

async def notify_new_excursion(bot: Bot, excursion_id: int):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ –Ω–æ–≤–æ–º –º–∞—Ä—à—Ä—É—Ç–µ."""
    try:
        excursion = await get_excursion(excursion_id)
        if not excursion:
            return
        guide_id = excursion["guide_id"]
        city = excursion["city"]
        keywords = excursion["keywords"]
        subscribers = await get_subscribers_for_excursion(guide_id, city, keywords)
        for subscriber in subscribers:
            message = (
                f"–ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç: {excursion['title']}\n"
                f"–ì–æ—Ä–æ–¥: {excursion['city']}\n"
                f"–¢–µ–º–∞—Ç–∏–∫–∞: {excursion['theme']}\n"
                f"–ß—Ç–æ–±—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å, –Ω–∞–ø–∏—à–∏: /book_{excursion['id']}"
            )
            await add_notification(subscriber["user_id"], message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –æ –Ω–æ–≤–æ–º –º–∞—Ä—à—Ä—É—Ç–µ: {e}")

async def notify_new_booking(bot: Bot, guide_id: int, title: str, user_id: int):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –≥–∏–¥–∞ –æ –Ω–æ–≤–æ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏."""
    try:
        message = NOTIFICATION_NEW_BOOKING.format(title=title)
        await add_notification(guide_id, message)
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≥–∏–¥—É {guide_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –æ –Ω–æ–≤–æ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

async def notify_new_request(bot: Bot, user_id: int, request_text: str):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ."""
    try:
        from database import get_admin_ids
        message = NOTIFICATION_NEW_REQUEST.format(request_text=request_text)
        for admin_id in get_admin_ids():
            await add_notification(admin_id, message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ: {e}")

async def notify_complaint(bot: Bot, excursion_id: int, chat_id: int):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –∂–∞–ª–æ–±–µ –≤ —á–∞—Ç–µ."""
    try:
        from database import get_admin_ids
        chat_link = f"https://t.me/c/{chat_id}"
        message = NOTIFICATION_NEW_COMPLAINT.format(excursion_id=excursion_id, chat_link=chat_link)
        for admin_id in get_admin_ids():
            await add_notification(admin_id, message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –æ –∂–∞–ª–æ–±–µ: {e}")

async def schedule_excursion_reminder(bot: Bot, booking_id: int, reminder_time: datetime):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —ç–∫—Å–∫—É—Ä—Å–∏–µ–π."""
    try:
        booking = await get_booking(booking_id)
        if not booking:
            return
        excursion = await get_excursion(booking["excursion_id"])
        start_location = await get_excursion_locations(booking["excursion_id"])
        dates = excursion["dates"].split(",")
        if not dates:
            return
        # –ë–µ—Ä—ë–º –±–ª–∏–∂–∞–π—à—É—é –¥–∞—Ç—É
        start_time = min([datetime.fromisoformat(date) for date in dates])
        if start_time < datetime.now():
            return  # –≠–∫—Å–∫—É—Ä—Å–∏—è —É–∂–µ –ø—Ä–æ—à–ª–∞

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–≥–æ–¥—É
        weather = await get_weather(start_location["lat"], start_location["lon"], start_time)
        recommendation = get_weather_recommendation(weather)

        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —Ç–µ–∫—É—â–∞—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è (–¥–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ)
        user_location = {"lat": 55.7558, "lon": 37.6173}  # –ü—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞
        travel_time, map_link = await get_travel_info(user_location, start_location)

        time_until = (start_time - datetime.now()).total_seconds() / 3600  # –í —á–∞—Å–∞—Ö
        message = NOTIFICATION_REMINDER.format(
            title=excursion["title"],
            time=f"{time_until:.1f} —á",
            start_location=f"({start_location['lat']}, {start_location['lon']})",
            travel_time=f"{travel_time} –º–∏–Ω",
            weather=weather,
            recommendation=recommendation,
            map_link=map_link,
            booking_id=booking_id
        )
        await add_notification(booking["user_id"], message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

async def get_weather(lat: float, lon: float, date: datetime) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å –ü–æ–≥–æ–¥–∞ API."""
    try:
        url = "https://api.weather.yandex.ru/v2/forecast"
        params = {
            "lat": lat,
            "lon": lon,
            "lang": "ru_RU",
            "limit": 1,
            "hours": True,
            "extra": True
        }
        headers = {"X-Yandex-API-Key": YANDEX_WEATHER_API_KEY}
        async with aiohttp.ClientSession() as session:
            async with session.get(url, params=params, headers=headers) as response:
                if response.status != 200:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: {response.status}")
                    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                data = await response.json()
                temp = data["fact"]["temp"]
                condition = data["fact"]["condition"]
                return f"{temp}¬∞C, {condition}"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: {e}")
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

def get_weather_recommendation(weather: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–≥–æ–¥—ã."""
    if "rain" in weather.lower() or "shower" in weather.lower():
        return WEATHER_RECOMMENDATION_RAIN
    elif "clear" in weather.lower() or "sunny" in weather.lower():
        return WEATHER_RECOMMENDATION_SUN
    elif "cold" in weather.lower() or int(weather.split("¬∞C")[0]) < 5:
        return WEATHER_RECOMMENDATION_COLD
    return ""

async def get_travel_info(start: Dict[str, float], end: Dict[str, float]) -> tuple[int, str]:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è –≤ –ø—É—Ç–∏ –∏ —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ä—à—Ä—É—Ç —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç—ã API."""
    try:
        url = "https://api.routing.yandex.net/v2/route"
        params = {
            "waypoints": f"{start['lat']},{start['lon']}|{end['lat']},{end['lon']}",
            "mode": "walking",  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–±–æ—Ä: walking, driving
            "apikey": YANDEX_MAPS_API_KEY
        }
        async with aiohttp.ClientSession() as session:
            async with session.get(url, params=params) as response:
                if response.status != 200:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞: {response.status}")
                    return 0, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                data = await response.json()
                duration = data["routes"][0]["duration"] // 60  # –í –º–∏–Ω—É—Ç–∞—Ö
                map_link = f"https://yandex.ru/maps/?rtext={start['lat']},{start['lon']}~{end['lat']},{end['lon']}&rtt=auto"
                return duration, map_link
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞: {e}")
        return 0, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

async def call_taxi(user_location: Dict[str, float], destination: Dict[str, float]) -> str:
    """–í—ã–∑—ã–≤–∞–µ—Ç —Ç–∞–∫—Å–∏ —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å –¢–∞–∫—Å–∏ API."""
    try:
        url = "https://taxi-routeinfo.taxi.yandex.net/route_info"
        params = {
            "cl": "econom",
            "rll": f"{user_location['lon']},{user_location['lat']}~{destination['lon']},{destination['lat']}",
            "apikey": YANDEX_TAXI_API_KEY
        }
        async with aiohttp.ClientSession() as session:
            async with session.get(url, params=params) as response:
                if response.status != 200:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —Ç–∞–∫—Å–∏: {response.status}")
                    return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —Ç–∞–∫—Å–∏."
                data = await response.json()
                price = data["options"][0]["price"]
                order_url = f"https://taxi.yandex.ru/order?cl=econom&from={user_location['lat']},{user_location['lon']}&to={destination['lat']},{destination['lon']}"
                return f"–¢–∞–∫—Å–∏ –∑–∞–∫–∞–∑–∞–Ω–æ! –°—Ç–æ–∏–º–æ—Å—Ç—å: {price} —Ä—É–±. –ü–µ—Ä–µ–π–¥–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {order_url}"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —Ç–∞–∫—Å–∏: {e}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —Ç–∞–∫—Å–∏."
